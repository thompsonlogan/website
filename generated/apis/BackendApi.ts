/* tslint:disable */
/* eslint-disable */
/**
 * Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessTokenResponse,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  InfoRequest,
  InfoResponse,
  LoginRequest,
  RefreshRequest,
  RegisterRequest,
  ResendConfirmationEmailRequest,
  ResetPasswordRequest,
  TwoFactorRequest,
  TwoFactorResponse,
} from '../models/index';
import {
    AccessTokenResponseFromJSON,
    AccessTokenResponseToJSON,
    ForgotPasswordRequestFromJSON,
    ForgotPasswordRequestToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    InfoRequestFromJSON,
    InfoRequestToJSON,
    InfoResponseFromJSON,
    InfoResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    ResendConfirmationEmailRequestFromJSON,
    ResendConfirmationEmailRequestToJSON,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    TwoFactorRequestFromJSON,
    TwoFactorRequestToJSON,
    TwoFactorResponseFromJSON,
    TwoFactorResponseToJSON,
} from '../models/index';

export interface ForgotPasswordPostRequest {
    forgotPasswordRequest?: ForgotPasswordRequest;
}

export interface LoginPostRequest {
    useCookies?: boolean;
    useSessionCookies?: boolean;
    loginRequest?: LoginRequest;
}

export interface Manage2faPostRequest {
    twoFactorRequest?: TwoFactorRequest;
}

export interface ManageInfoPostRequest {
    infoRequest?: InfoRequest;
}

export interface MapIdentityApiConfirmEmailRequest {
    userId?: string;
    code?: string;
    changedEmail?: string;
}

export interface RefreshPostRequest {
    refreshRequest?: RefreshRequest;
}

export interface RegisterPostRequest {
    registerRequest?: RegisterRequest;
}

export interface ResendConfirmationEmailPostRequest {
    resendConfirmationEmailRequest?: ResendConfirmationEmailRequest;
}

export interface ResetPasswordPostRequest {
    resetPasswordRequest?: ResetPasswordRequest;
}

/**
 * 
 */
export class BackendApi extends runtime.BaseAPI {

    /**
     */
    async forgotPasswordPostRaw(requestParameters: ForgotPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/forgotPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotPasswordRequestToJSON(requestParameters['forgotPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async forgotPasswordPost(requestParameters: ForgotPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.forgotPasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async loginPostRaw(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        if (requestParameters['useCookies'] != null) {
            queryParameters['useCookies'] = requestParameters['useCookies'];
        }

        if (requestParameters['useSessionCookies'] != null) {
            queryParameters['useSessionCookies'] = requestParameters['useSessionCookies'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async loginPost(requestParameters: LoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenResponse> {
        const response = await this.loginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async manage2faPostRaw(requestParameters: Manage2faPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwoFactorResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/manage/2fa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TwoFactorRequestToJSON(requestParameters['twoFactorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwoFactorResponseFromJSON(jsonValue));
    }

    /**
     */
    async manage2faPost(requestParameters: Manage2faPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwoFactorResponse> {
        const response = await this.manage2faPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async manageInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/manage/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async manageInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.manageInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async manageInfoPostRaw(requestParameters: ManageInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // oauth2 authentication
        }

        const response = await this.request({
            path: `/manage/info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InfoRequestToJSON(requestParameters['infoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async manageInfoPost(requestParameters: ManageInfoPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.manageInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async mapIdentityApiConfirmEmailRaw(requestParameters: MapIdentityApiConfirmEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['changedEmail'] != null) {
            queryParameters['changedEmail'] = requestParameters['changedEmail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/confirmEmail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mapIdentityApiConfirmEmail(requestParameters: MapIdentityApiConfirmEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mapIdentityApiConfirmEmailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async refreshPostRaw(requestParameters: RefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async refreshPost(requestParameters: RefreshPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessTokenResponse> {
        const response = await this.refreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async registerPostRaw(requestParameters: RegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerPost(requestParameters: RegisterPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async resendConfirmationEmailPostRaw(requestParameters: ResendConfirmationEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/resendConfirmationEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendConfirmationEmailRequestToJSON(requestParameters['resendConfirmationEmailRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resendConfirmationEmailPost(requestParameters: ResendConfirmationEmailPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendConfirmationEmailPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async resetPasswordPostRaw(requestParameters: ResetPasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/resetPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters['resetPasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resetPasswordPost(requestParameters: ResetPasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordPostRaw(requestParameters, initOverrides);
    }

}
